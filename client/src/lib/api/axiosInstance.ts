import axios from "axios";

const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_SERVER_DOMAIN, // üëà ƒê·ªïi IP n√†y n·∫øu d√πng tr√™n thi·∫øt b·ªã th·∫≠t
  headers: {
    "Content-Type": "application/json",
  },
  withCredentials: true,
});
let isRefreshing = false;

axiosInstance.interceptors.response.use(
  (res) => res,
  async (err) => {
    const originalRequest = err.config;

    // N·∫øu l·ªói l√† 401 v√† ch∆∞a retry
    if (err.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // Tr√°nh nhi·ªÅu l·∫ßn g·ª≠i /token/refresh
        if (!isRefreshing) {
          isRefreshing = true;
          await axiosInstance.post("/token/refresh");
          isRefreshing = false;
          return axiosInstance(originalRequest); // G·ªçi l·∫°i request c≈©
        }
      } catch (refreshError) {
        isRefreshing = false;

        // N·∫øu refresh c≈©ng l·ªói (do kh√¥ng c√≥ cookie), th√¨ logout
        console.warn("Refresh token failed. Redirecting to login...");
        // Optional: x√≥a localStorage/session n·∫øu c√≥
        localStorage.clear(); // n·∫øu b·∫°n d√πng ƒë·ªÉ l∆∞u auth
        // Chuy·ªÉn v·ªÅ trang login
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(err);
  }
);

export default axiosInstance;
